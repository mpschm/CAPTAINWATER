<div class="boat-page">
  <div class="d-none">
    <button>
      <%= link_to "stop", game_plays_path(@game), class:"btn-game-boat", id:"submit-game" %>
    </button>

    <!-- <div class="score score-game"> -->
    <%= form_tag game_plays_path(@game), method: :get, id: "score_form" do %>
      <%= text_field_tag "score",
        @play.score,
        class: "score-text", id: "score_input"
      %>
    <% end %>

  </div>

  <div class="cloud">
    <div class="score-boat-game">
      <p class="score-text score-game d-flex align-items-center justify-content-center"><%= @play.score %></p>
    </div>

    <div class="pie-game degree">
      <div class="block-game">
        <div id="time-boat-game">20</div>
      </div>
    </div>

    <%= image_tag "cloud.svg", class:"cloud-1" %>
    <%= image_tag "cloud.svg", class:"cloud-2" %>
    <%= image_tag "cloud.svg", class:"cloud-3" %>
  </div>

  <div class="boat">
    <%= image_tag "boat.svg", class:"game-boat"%>
  </div>

  <div class="waves">
    <%= image_tag "water_4.svg", class:"water-game water-4" %>
    <%= image_tag "water_3.svg", class:"water-game water-3" %>
    <%= image_tag "water_2.svg", class:"water-game water-2" %>
    <%= image_tag "water_1.svg", class:"water-game water-1" %>
  </div>

</div>

<script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.4.21/p5.js"></script>
<script>

  // Learning Processing
  // Daniel Shiffman
  // http://www.learningprocessing.com

  // Example 10-10: The raindrop catching game

  class Drop {
    constructor() {
      this.r = 8;                 // All raindrops are the same size
      this.x = random(width);     // Start with a random x location
      this.y = -this.r*4;              // Start a little above the window
      this.speed = random(1, 5);   // Pick a random speed
      this.c = color(50, 100, 150); // Color
    }

    // Move the raindrop down
    move() {
      // Increment by speed
      this.y += this.speed;
    }

    // Check if it hits the bottom
    reachedBottom() {
      // If we go a little beyond the bottom
      if (this.y > height + this.r*4) {
        return true;
      } else {
        return false;
      }
    }

    // Display the raindrop
    display() {
      // Display the drop
      fill(this.c);
      noStroke();
      // Display the drop
      for (var i = 2; i < this.r; i++ ) {
        ellipse(this.x, this.y + i*4, i*2, i*2);
      }
    }

    // If the drop is caught
    caught() {
      // Stop it from moving by setting speed equal to zero
      this.speed = 0;
      // Set the location to somewhere way off-screen
      this.y = -1000;

      let scoreInput = document.getElementById("score_input");
      let originalScore = Number(scoreInput.value);
      let newScore = originalScore += 1;
      scoreInput.value = newScore;
      let scoreStar = document.querySelector(".score-game");
      scoreStar.innerText = newScore;
    }
  }
  // Learning Processing
  // Daniel Shiffman
  // http://www.learningprocessing.com

  // Example 10-10: The raindrop catching game

  class Catcher {
    constructor(tempR) {
      this.r = tempR; // radius
      this.col = color(50, 10, 10, 150);
      this.x = 0;     // location
      this.y = 0;
    }

    setLocation(tempX, tempY) {
      this.x = tempX;
      this.y = tempY;
    }

    display() {
     stroke(0);
      fill(175);
      ellipse(this.x, this.y, this.r*2, this.r*2);
    }

    // A function that returns true or false based on
    // if the catcher intersects a raindrop
    intersect(d) {
      // Calculate distance
      var distance = dist(this.x, this.y, d.x, d.y);

      // Compare distance to sum of radii
      if (distance < this.r + d.r) {
        return true;
      } else {
        return false;
      }
    }

  }

  // Learning Processing
  // Daniel Shiffman
  // http://www.learningprocessing.com

  // Example 10-5: Object-oriented timer

  class Timer {
    constructor(tempTotalTime) {
      this.savedTime = 0;        // When Timer starts
      this.totalTime = tempTotalTime; // How long Timer should last
    }

    // Starting the timer
    start() {
      // When the timer starts it stores the current time in milliseconds.
      this.savedTime = millis();
    }

    // The function isFinished() returns true if 5,000 ms have passed.
    // The work of the timer is farmed out to this method.
    isFinished() {
      // Check how much time has passed
      var passedTime = millis() - this.savedTime;
      if (passedTime > this.totalTime) {
        return true;
      } else {
        return false;
      }
    }
  }
  // Learning Processing
  // Daniel Shiffman
  // http://www.learningprocessing.com

  // Example 10-10: The raindrop catching game

  var catcher;    // One catcher object
  var timer;        // One timer object
  var drops;       // An array of drop objects
  var totalDrops = 0; // totalDrops

  function setup() {
    createCanvas(document.querySelector("body").offsetWidth, document.querySelector("body").offsetHeight);
    catcher = new Catcher(32); // Create the catcher with a radius of 32
    drops = [];                // Create empty array
    timer = new Timer(300);    // Create a timer that goes off every 300 milliseconds
    timer.start();             // Starting the timer
  }

  function draw() {
    background(109, 213, 250);

    // Set catcher location
    catcher.setLocation(mouseX, mouseY);
    // Display the catcher
    catcher.display();

    // Check the timer
    if (timer.isFinished()) {
      // Deal with raindrops
      // Initialize one drop
      drops[totalDrops] = new Drop();
      // Increment totalDrops
      totalDrops ++ ;
      // If we hit the end of the array
      if (totalDrops >= 1000) {
        totalDrops = 0; // Start over
      }
      timer.start();
    }

    // Move and display all drops
    for (var i = 0; i < totalDrops; i++ ) {
      drops[i].move();
      drops[i].display();
      if (catcher.intersect(drops[i])) {
        drops[i].caught();
      }
    }
  }
</script>

